import random
import datetime

start_police_num = 1234567891234567
start_patient = 0

american_names_male = ['Адам', 'Алан', 'Алекс', 'Альберт', 'Андреа', 'Бенджамин', 'Билл', 'Боб',
                       'Бобби', 'Брайн', 'Брендон', 'Брюс', 'Вильям', 'Винсент', 'Гарри', 'Генри',
                       'Давид', 'Даниэль', 'Джастин', 'Джеймс', 'Джейсон', 'Джек', 'Джексон', 'Джереми',
                       'Джерри', 'Джозеф', 'Джон', 'Джонатан', 'Джордан', 'Джордж', 'Джош', 'Джошуа',
                       'Дилан', 'Дилон', 'Доминик', 'Дональд', 'Дуглас', 'Дэвид', 'Итан', 'Калеб', 'Карен',
                       'Квинн', 'Кевин', 'Кен', 'Кинг', 'Кларк', 'Коннор', 'Коул', 'Кристиан', 'Кристофер',
                       'Кэмерон', 'Лео', 'Логан', 'Луис', 'Люк', 'Майкл', 'Марк', 'Микки', 'Мэтью', 'Николас',
                       'Оливер', 'Патрик', 'Пауль', 'Питер', 'Пол', 'Райан', 'Райян', 'Рассел', 'Рафаэль', 'Рей',
                       'Рик', 'Ричард', 'Роберт', 'Робин', 'Роджер', 'Рэй', 'Саймон', 'Скотт', 'Спенсер', 'Стивен',
                       'Сэм', 'Тейлор', 'Тим', 'Тодд', 'Том', 'Томас', 'Тони', 'Уильям', 'Феликс', 'Фил', 'Филипп',
                       'Флойд', 'Франциско', 'Фред', 'Фрэнк', 'Хантер', 'Харрис', 'Хью', 'Чарли', 'Чарльз', 'Шон',
                       'Эдвард', 'Эдгар', 'Элвин', 'Эндрю', 'Энтони', 'Эрик', 'Этан', 'Эшли']


american_names_female = ['Адриана', 'Альбина', 'Анджелина', 'Анжела', 'Анжелика', 'Ариэль', 'Барбара', 'Белла',
                         'Бетти', 'Бренда', 'Бьянка', 'Ванесса', 'Грейс', 'Грета', 'Дженнифер', 'Джессика',
                         'Джоан', 'Джозефина', 'Джуди', 'Джулиан', 'Джулиана', 'Джулия', 'Донна', 'Дороти',
                         'Дэна', 'Изабелла', 'Каролин', 'Кат', 'Кейт', 'Келли', 'Клара', 'Кэрол', 'Кэролин',
                         'Кэт', 'Кэтрин', 'Лиза', 'Лили', 'Линда', 'Лора', 'Люси', 'Маргарет', 'Мария',
                         'Марта', 'Матильда', 'Мия', 'Молли', 'Моника', 'Мэри', 'Николь', 'Нэнси', 'Оливия',
                         'Патрисия', 'Рита', 'Роуз', 'Руби', 'Рут', 'Сандра', 'Сара', 'Синтия', 'Скарлетт',
                         'Стелла', 'Сьюзан', 'Тереза', 'Тина', 'Тифани', 'Флоренс', 'Фрида', 'Хелен', 'Шэрон',
                         'Эвелин', 'Элизабет', 'Элис', 'Элла', 'Эльза', 'Эмили', 'Эмилия', 'Эмма']

american_surnames = ['Смит', 'Джонсон', 'Уильямс', 'Джонс', 'Браун', 'Дэвис', 'Миллер', 'Уилсон', 'Мур',
                     'Тейлор', 'Андерсон', 'Томас', 'Джексон', 'Уайт', 'Харрис', 'Мартин', 'Томпсон', 'Гарсиа',
                     'Мартинес', 'Робинсон', 'Кларк', 'Родригес', 'Льюис', 'Ли', 'Уокер', 'Холл', 'Аллен', 'Янг',
                     'Эрнандес', 'Кинг', 'Райт', 'Лопес', 'Хилл', 'Скотт', 'Грин', 'Адамс', 'Бейкер', 'Гонсалес',
                     'Нельсон', 'Картер', 'Митчелл', 'Перес', 'Робертс', 'Тёрнер', 'Филлипс', 'Кэмпбелл', 'Паркер',
                     'Эванс', 'Эдвардс', 'Коллинз', 'Стюарт', 'Санчес', 'Моррис', 'Роджерс', 'Рид', 'Кук', 'Морган',
                     'Белл', 'Мёрфи', 'Бейли', 'Ривера', 'Купер', 'Ричардсон', 'Кокс', 'Говард', 'Уорд', 'Торрес',
                     'Петерсон', 'Грей', 'Рамирес', 'Джеймс', 'Уотсон', 'Брукс', 'Келли', 'Сандерс', 'Прайс',
                     'Беннетт', 'Вуд', 'Барнс', 'Росс', 'Хендерсон', 'Коулман', 'Дженкинс', 'Пэрри', 'Пауэлл', 'Лонг',
                     'Паттерсон', 'Хьюз', 'Флорес', 'Вашингтон', 'Батлер', 'Симмонс', 'Фостер', 'Гонсалес', 'Брайант',
                     'Александер', 'Расселл', 'Гриффин', 'Диас', 'Хейз']

russian_males_names = ['Авдей', 'Авксентий', 'Агафон', 'Александр', 'Алексей', 'Альберт', 'Альвиан', 'Анатолий',
                       'Андрей', 'Антон', 'Антонин', 'Анфим', 'Аристарх', 'Аркадий', 'Арсений', 'Артём', 'Артур',
                       'Архипп', 'Афанасий', 'Богдан', 'Борис', 'Вадим', 'Валентин', 'Валерий', 'Валерьян', 'Варлам',
                       'Варсонофий', 'Варфоломей', 'Василий', 'Венедикт', 'Вениамин', 'Викентий', 'Виктор',
                       'Виссарион', 'Виталий', 'Владимир', 'Владислав', 'Владлен', 'Влас', 'Всеволод', 'Вячеслав',
                       'Гавриил', 'Галактион', 'Геласий', 'Геннадий', 'Георгий', 'Герасим', 'Герман', 'Глеб', 'Гордей',
                       'Григорий', 'Даниил', 'Демид', 'Демьян', 'Денис', 'Дмитрий', 'Добрыня', 'Донат', 'Дорофей',
                       'Евгений', 'Евграф', 'Евдоким', 'Евсей', 'Евстафий', 'Егор', 'Иван', 'Игорь', 'Ким', 'Кирилл',
                       'Лев', 'Леонид', 'Леонтий', 'Максим', 'Марк', 'Матвей', 'Михаилб', 'Никита', 'Олег', 'Павел',
                       'Пётр', 'Роман', 'Ростислав', 'Руслан', 'Савва', 'Савелий', 'Семён', 'Сергей', 'Станислав',
                       'Степан', 'Тарас', 'Тимофей', 'Тимур', 'Тихон', 'Ярослав']

russian_females_names = ['Алина', 'Алла', 'Анастасия', 'Ангелина', 'Анжела', 'Анжелика', 'Анна', 'Антонина', 'Анфиса',
                         'Валентина', 'Валерия', 'Варвара', 'Василиса', 'Вера', 'Вероника', 'Виктория', 'Галина',
                         'Дарья', 'Евгения', 'Екатерина', 'Елена', 'Елизавета', 'Жанна', 'Злата', 'Инга', 'Инесса',
                         'Инна', 'Иоанна', 'Ирина', 'Карина', 'Каролина', 'Ксения', 'Лидия', 'Лилия', 'Любовь',
                         'Людмила', 'Маргарита', 'Марина', 'Мария', 'Надежда', 'Наталья', 'Нина', 'Оксана', 'Ольга',
                         'Полина', 'Светлана', 'София', 'Татьяна', 'Ульяна', 'Юлия', 'Яна']

russian_males_surnames = ['Смирнов', 'Иванов', 'Кузнецов', 'Соколов', 'Попов', 'Лебедев', 'Козлов', 'Новиков',
                          'Морозов', 'Петров', 'Волков', 'Соловьёв', 'Васильев', 'Зайцев', 'Павлов', 'Семёнов',
                          'Голубев', 'Виноградов', 'Богданов', 'Воробьёв', 'Фёдоров', 'Михайлов', 'Беляев',
                          'Тарасов', 'Белов', 'Комаров', 'Орлов', 'Киселёв', 'Макаров', 'Андреев', 'Ковалёв',
                          'Ильин', 'Гусев', 'Титов', 'Кузьмин', 'Кудрявцев', 'Баранов', 'Куликов', 'Алексеев',
                          'Степанов', 'Яковлев', 'Сорокин', 'Сергеев', 'Романов', 'Захаров', 'Борисов', 'Королёв',
                          'Герасимов', 'Пономарёв', 'Григорьев', 'Лазарев', 'Медведев', 'Ершов', 'Никитин', 'Соболев',
                          'Рябов', 'Поляков', 'Цветков', 'Данилов', 'Жуков', 'Фролов', 'Журавлёв', 'Николаев',
                          'Крылов', 'Максимов', 'Сидоров', 'Осипов', 'Белоусов', 'Федотов', 'Дорофеев', 'Егоров',
                          'Матвеев', 'Бобров', 'Дмитриев', 'Калинин', 'Анисимов', 'Петухов', 'Веселов', 'Филиппов',
                          'Марков', 'Большаков', 'Суханов', 'Миронов', 'Ширяев', 'Александров', 'Коновалов',
                          'Шестаков', 'Казаков', 'Ефимов', 'Денисов', 'Громов', 'Фомин', 'Давыдов', 'Мельников',
                          'Щербаков', 'Блинов', 'Колесников', 'Карпов', 'Афанасьев', 'Власов', 'Маслов', 'Исаков',
                          'Тихонов', 'Аксёнов', 'Горбунов', 'Кудряшов', 'Быков', 'Зуев', 'Третьяков', 'Савельев',
                          'Панов', 'Рыбаков', 'Суворов', 'Абрамов']

russian_females_surnames = ['Смирнова', 'Иванова', 'Кузнецова', 'Соколова', 'Попова', 'Лебедева', 'Козлова',
                            'Новикова', 'Морозова', 'Петрова', 'Волкова', 'Соловьёва', 'Васильева', 'Зайцева',
                            'Павлова', 'Семёнова', 'Голубева', 'Виноградова', 'Богданова', 'Воробьёва', 'Фёдорова',
                            'Михайлова', 'Беляева', 'Тарасова', 'Белова', 'Комарова', 'Орлова', 'Киселёва',
                            'Макарова', 'Андрееваа', 'Ковалёва', 'Ильина', 'Гусева', 'Титова', 'Кузьмина',
                            'Кудрявцева', 'Баранова', 'Куликова', 'Алексеева', 'Степанова', 'Яковлева', 'Сорокина',
                            'Сергеева', 'Романова', 'Захарова', 'Борисова', 'Королёва', 'Герасимова', 'Пономарёва',
                            'Григорьева', 'Лазарева', 'Медведева', 'Ершова', 'Никитина', 'Соболева', 'Рябова',
                            'Полякова', 'Цветковаа', 'Данилова', 'Жукова', 'Фролова', 'Журавлёва', 'Николаева',
                            'Крылова', 'Максимова', 'Сидорова', 'Осипова', 'Белоусова', 'Федотова', 'Дорофеева',
                            'Егорова', 'Матвееваа', 'Боброваа', 'Дмитриева', 'Калинина', 'Анисимова', 'Петухова',
                            'Веселова', 'Филиппова', 'Маркова', 'Большакова', 'Суханова', 'Миронова', 'Ширяева',
                            'Александрова', 'Коноваловаа', 'Шестакова', 'Казакова', 'Ефимова', 'Денисова', 'Громова',
                            'Фомина', 'Давыдова', 'Мельникова', 'Щербакова', 'Блинова', 'Колесникова', 'Карпова',
                            'Афанасьева', 'Власова', 'Маслова', 'Исакова', 'Тихонова', 'Аксёнова', 'Горбунова',
                            'Кудряшова', 'Быкова', 'Зуева', 'Третьякова', 'Савельева', 'Панова', 'Рыбакова', 'Суворова',
                            'Абрамова']

specializations = ['Акушер-гинеколог', 'Акушер', 'Аллерголог-иммунолог', 'Аллерголог', 'Ангиохирург',
                   'Андролог-эндокринолог', 'Андролог', 'Анестезиолог-реаниматолог', 'Анестезиолог',
                   'Аритмолог', 'Ароматерапевт', 'Артролог', 'Бактериолог', 'Бальнеолог', 'Валеолог',
                   'Венеролог', 'Вертебролог', 'Вирусолог', 'Врач УЗИ', 'Врач общей практики',
                   'Врач по лечебной физкультуре и спорту', 'Врач по лечению бесплодия', 'Врач по спортивной медицине',
                   'Врач скорой помощи', 'Врач функциональной диагностики', 'Гастроэнтеролог',
                   'Гематолог', 'Генетик', 'Гепатолог', 'Гериатр', 'Гинеколог-перинатолог',
                   'Гинеколог-эндокринолог', 'Гинеколог', 'Гирудотерапевт', 'Гомеопат', 'Дерматовенеролог',
                   'Дерматолог', 'Диагност', 'Диетолог', 'Зубной врач', 'Иглорефлексотерапевт', 'Иммунолог',
                   'Имплантолог', 'Инфекционист', 'Кардиолог', 'Кардиоревматолог', 'Кардиохирург', 'Кинезиолог',
                   'Колопроктолог', 'Косметолог', 'Курортолог', 'ЛОР', 'Лаборант', 'Логопед', 'Маммолог',
                   'Мануальный терапевт', 'Массажист', 'Миколог', 'Нарколог', 'Невролог', 'Невропатолог',
                   'Нейротравматолог', 'Нейрохирург', 'Нефролог', 'Окулист', 'Онкогинеколог', 'Онколог-гинеколог',
                   'Онколог-хирург', 'Онколог', 'Онкоуролог', 'Ортодонт', 'Ортопед-травматолог', 'Ортопед', 'Остеопат',
                   'Отоларинголог', 'Отоневролог', 'Офтальмолог-хирург', 'Офтальмолог', 'Паразитолог', 'Паркинсонолог',
                   'Пародонтолог', 'Пластический хирург', 'Подолог', 'Проктолог', 'Профпатолог', 'Психиатр-нарколог',
                   'Психиатр', 'Психолог', 'Психоневролог', 'Психотерапевт', 'Пульмонолог', 'Радиолог', 'Реабилитолог',
                   'Реаниматолог', 'Ревматолог', 'Рентгенолог', 'Репродуктолог', 'Рефлексотерапевт',
                   'Санитарный врач по гигиене питания', 'Санитарный врач по гигиене труда', 'Сексолог',
                   'Сексопатолог', 'Семейный врач', 'Семейный доктор', 'Сомнолог', 'Сосудистый хирург',
                   'Специалист восстановительного лечения', 'Стоматолог-ортодонт', 'Стоматолог-ортопед',
                   'Стоматолог-протезист', 'Стоматолог-терапевт', 'Стоматолог-хирург', 'Стоматолог', 'Суггестолог',
                   'Судебно-медицинский эксперт', 'Сурдолог', 'Терапевт мануальный', 'Терапевт', 'Токсиколог',
                   'Торакальный хирург', 'Травматолог', 'Трансфузиолог', 'Трихолог', 'УЗИ врач', 'Урогинеколог',
                   'Уролог', 'Фармаколог клинический', 'Физиотерапевт', 'Флеболог', 'Фониатр', 'Фтизиатр',
                   'Хирург пластический', 'Хирург сосудистый', 'Хирург торакальный', 'Хирург челюстно-лицевой',
                   'Хирург-флеболог', 'Хирург', 'Эмбриолог', 'Эндодонт', 'Эндокринолог', 'Эндоскопист',
                   'Эпидемиолог', 'Эпилептолог']

doctors_categories = ['Вторая', 'Первая', 'Высшая']

cities = ['Моксква', 'Апрелевка', 'Балашиха', 'Бронницы', 'Видное', 'Домодедово', 'Котельники', 'Лосино-Петровский',
          'Лыткарино', 'Люберцы', 'Мытищи', 'Ногинск', 'Одинцово', 'Пушкино', 'Реутов', 'Раменское',
          'Ступино', 'Фрязино', 'Химки', 'Щёлково', 'Электросталь', 'Электроугли']

streets = ['Бабаевская', 'Багратионовский проезд', 'Багрицкого', 'Баженова', 'Бажова', 'Бакинская', 'Бакунинская',
           'Балакиревский переулок', 'Балаклавский проспект', 'Балтийская', 'Банный проезд', 'Барабанный переулок',
           'Барашёвский переулок', 'Барболина', 'Аминьевское шоссе', 'Амундсена', 'Амурская', 'Амурский переулок',
           'Анадырский проезд', 'Ананьевский переулок', 'Анатолия Живова', 'Ангарская', 'Ангелов переулок', 'Андреевка',
           'Андреево-Забелинская', 'Андреевская набережная', 'Андреевский мост', 'Андроновское шоссе',
           'Андроньевская набережная', 'Андроньевская площадь', 'Андроньевский проезд', 'проспект Андропова',
           'Анненская', 'Анненский проезд', 'Анны Северьяновой', 'Васильцовский переулок', 'переулок Васнецова',
           'Ватутина', 'Введенского', 'Ведерников переулок', 'Веерная', 'Вековая', 'Велозаводская', 'Вельяминовская',
           'Венецианова', 'Венёвская', 'Вербная', 'Верейская', 'Вересаева', 'Вересковая', 'Верещагина', 'Верземнека',
           'проспект Вернадского', 'Верхнелихоборская', 'Верхние Поля', 'Генерала Глаголева', 'Генерала Дорохова',
           'Ермолова', 'площадь Генерала Жадова', 'бульвар Генерала Карбышева', 'Генерала Кузнецова',
           'Генерала Рычагова', 'Генерала Тюленева', 'Георгиевский переулок', 'Герасима Курина',
           'Героев Панфиловцев', 'Гжатская', 'Гжельский переулок', 'Гиляровского', 'бульвар Главмосстроя',
           'Главмосстроя', 'Главная аллея', 'Главная', 'Глазовский переулок', 'Глебовская', 'Глебовский мост',
           'Глебовский переулок', 'Глинистый переулок', 'Глинищевский переулок', 'Глубокий переулок',
           'Глухарёв переулок', 'Говорова', 'Гоголевский бульвар', 'Гоголя', 'Годовикова', 'Голиковский переулок',
           'Девяткин переулок', 'Дегтярный переулок', 'Дегунинская', 'Дегунинский проезд', 'проезд Дежнёва',
           'Декабристов', 'Делегатская', 'Деловая', 'Демьяна Бедного', 'Денежный переулок', 'Дениса Давыдова',
           'Денисовский переулок', 'Деповская', 'Дербеневская набережная', 'Дербеневская', 'Десантная', 'Детская',
           'площадь Джавахарлала Неру', 'Джанкойская', 'Джанкойский проезд', 'Дивизионная', 'Динамовская',
           'Дмитриевского', 'бульвар Дмитрия Донского', 'Дмитрия Ульянова', 'Дмитровский переулок',
           'Дмитровский проезд', 'Дмитровское шоссе', 'Днепропетровская', 'Днепропетровский проезд',
           'Егерская', 'Егора Абакумова', 'Егорьевская', 'Егорьевский проезд', 'Еготьевский тупик',
           'Ездаков переулок', 'Ейская', 'проспект Екатерины Будановой', 'Еланского', 'Елены Колесовой',
           'Елецкая', 'Елизаветинский переулок', 'Елисеевский переулок', 'Елоховская площадь', 'Елоховский проезд',
           'Ельнинская', 'Енисейская', 'Ереванская', 'Ермакова Роща', 'Ермолаевский переулок', 'Еропкинский переулок',
           'Есенинский бульвар', 'Ефремова', 'Живописная', 'Живописный мост', 'Жигулёвская', 'Жидков переулок',
           'Житная', 'Житомирская', 'Жужа', 'Жуков проезд', 'Жуковского', 'Жулебинская', 'Жулебинский бульвар',
           'Жулебинский проезд', 'Забелина', 'Заваруевский переулок', 'Заветная', 'проезд Завода Серп и Молот',
           'Заводская', 'Заводское шоссе', 'Заводской переулок', 'Заводской проезд', 'Заводской тупик',
           'Загородное шоссе', 'проезд Загорского', 'Загорьевская', 'Загорьевский проезд', 'Задонский проезд',
           'Заморенова', 'Заозёрная', 'Западная', 'Ивана Сусанина', 'Ивана Франко', 'Ивановская', 'Ивановский проезд',
           'Ивантеевская', 'Иваньковское шоссе', 'Иверский переулок', 'Ивовая', 'Игарский проезд', 'Игральная',
           'Иерусалимская', 'Иерусалимский проезд', 'Ижорская', 'Ижорский проезд', 'Изваринская',
           'Известковый переулок', 'Извилистый проезд', 'Измайловская площадь', 'Измайловская', 'Измайловский Вал',
           'Измайловский бульвар', 'Измайловский проезд', 'Корнейчука', 'Коробейников переулок', 'Коровий Вал',
           'Коровинский проезд', 'Коровинское шоссе', 'Короленко', 'Косинская', 'Космодамианская набережная',
           'Космонавта Волкова', 'Космонавтов', 'Косой переулок', 'Костикова', 'Костомаровская набережная',
           'Костомаровский мост', 'Костомаровский переулок', 'Костромская', 'Костякова', 'Костянский переулок',
           'Косыгина', 'Котельническая набережная', 'Лобачевского', 'Лобачика', 'Лобненская', 'Логвиненко',
           'Лодочная', 'Локомотивный проезд', 'Ломоносовский проспект', 'Лонгиновская', 'Лопухинский переулок',
           'Лосевская', 'Лосиноостровская', 'Лосинский проезд', 'Лубочный переулок', 'Лубянская площадь',
           'Лубянский проезд', 'Луганская', 'Луговая', 'Луговой проезд', 'Лужнецкая набережная', 'Лужнецкий мост',
           'Лужнецкий проезд', 'Лужники', 'Лужская', 'Малая Ширяевская', 'Малая Юшуньская', 'Малая Якиманка',
           'Маленковская', 'Малинская', 'Маломосковская', 'Малыгина', 'Малыгинский проезд', 'Каменщики', 'Нагорная',
           'Нагорный бульвар', 'Нагорный проезд', 'Налесный переулок', 'Наличная', 'Намёткина', 'проезд Нансена',
           'Напольный проезд', 'Напрудная 1-я', 'Напрудная 2-я', 'Напрудный переулок', 'Нарвская', 'Наримановская',
           'Наро-Фоминская', 'Народная', 'Народного Ополчения', 'Народный переулок', 'Народный проспект',
           'Нарышкинская аллея', 'Нарышкинский проезд', 'Насосная', 'Наставнический переулок', 'Обводное шоссе',
           'Оболенский переулок', 'Оборонная', 'Образцова', 'Обручева', 'переулок  Обыденский 1-й',
           'Овчинниковская набережная', 'переулок Огородная Слобода', 'Огородный проезд', 'Одесская', 'Одинцовская',
           'проезд Одоевского', 'Озерковская набережная', 'Озерковский переулок', 'Озёрная аллея', 'Озёрная площадь' ]

sexs = ['м', 'ж']

blood_types = ['A', 'B', 'AB', '0']
rhesus_factors = ['+', '-']
health_groups = ['1', '2', '3a', '3b']
disabilities = ['1', '2', '3', 'нет']


def generate_male():
    r = random.randint(0, 1)
    if r == 0:  # american
        name, surname = generate_american_male()
    else:  # russian
        name, surname = generate_russian_male()

    return name, surname


def generate_female():
    r = random.randint(0, 1)
    if r == 0:  # american
        name, surname = generate_american_female()
    else:  # russian
        name, surname = generate_russian_female()

    return name, surname


def generate_american_female():
    name = american_names_female[random.randint(0, len(american_names_female) - 1)]
    surname = american_surnames[random.randint(0, len(american_surnames) - 1)]
    return name, surname


def generate_russian_female():
    name = russian_females_names[random.randint(0, len(russian_females_names) - 1)]
    surname = russian_females_surnames[random.randint(0, len(russian_females_surnames) - 1)]
    return name, surname


def generate_american_male():
    name = american_names_male[random.randint(0, len(american_names_male) - 1)]
    surname = american_surnames[random.randint(0, len(american_surnames) - 1)]
    return name, surname


def generate_russian_male():
    name = russian_males_names[random.randint(0, len(russian_males_names) - 1)]
    surname = russian_males_surnames[random.randint(0, len(russian_males_surnames) - 1)]
    return name, surname


def random_phone_number():
    number = '79'

    for i in range(9):
        rand_int = random.randint(0, 9)
        number += str(rand_int)

    return number


def generate_salary(doctor_category):
    salary = ''
    if doctor_category == 'Вторая':
        salary = str(random.randint(15, 30) * 1000)
    elif doctor_category == 'Первая':
        salary = str(random.randint(30, 70) * 1000)
    else:
        salary = str(random.randint(70, 100) * 1000)
    return salary


def generate_random_doctor():
    sex = sexs[random.randint(0, 1)]
    if sex == sexs[0]:
        name, surname = generate_male()
    else:
        name, surname = generate_female()

    rand_year = random.randint(1950, 2000)
    rand_month = random.randint(1, 12)
    rand_day = random.randint(1, 28)

    date_of_birth = ""
    date_of_birth += str(rand_year) + '-' + str(rand_month) + '-' + str(rand_day)

    speciality = specializations[random.randint(0, len(specializations) - 1)]

    ph_num = random_phone_number()

    category = doctors_categories[random.randint(0, len(doctors_categories) - 1)]

    salary = generate_salary(category)

    result = "'"
    result += name + "', '" + surname + "', '" + sex + "', '" + date_of_birth + "', '" + \
                speciality + "', '" + ph_num + "', '" + category + "', '" + salary + "'"

    return result


def generate_random_address():
    country = 'Россия'
    city = cities[random.randint(0, len(cities) - 1)]
    street = streets[random.randint(0, len(streets) - 1)]
    house = str(random.randint(1, 70))
    building = random.randint(0, 10)
    if building == 0 or building > 5:
        building = None
    else:
        building = str(building)
    flat = str(random.randint(1, 128))

    result = "'"
    result += country + "', '" + city + "', '" + street + "', " + house
    if building == None:
        result += ", NULL, "
    else:
        result += ", '" + building + "', "
    result += flat + ""
    return result


def generate_policy_number():
    global start_police_num
    start_police_num += 1
    return start_police_num

def create_card():
    sex = sexs[random.randint(0, 1)]
    if sex == sexs[0]:
        name, surname = generate_male()
    else:
        name, surname = generate_female()

    rand_year = random.randint(1950, 2019)
    rand_month = random.randint(1, 12)
    rand_day = random.randint(1, 28)
    date_of_birth = ""
    date_of_birth += str(rand_year) + '-' + str(rand_month) + '-' + str(rand_day)

    phone_num = random_phone_number()
    OMS_policy_number = str(generate_policy_number())
    address = str(random.randint(1, 1000))
    blood_type = blood_types[random.randint(0, len(blood_types) - 1)]
    rhesus_factor = rhesus_factors[random.randint(0, len(rhesus_factors) - 1)]
    health_group = health_groups[random.randint(0, len(health_groups) - 1)]
    disability = disabilities[random.randint(0, len(disabilities) - 1)]

    result = ""
    result += "'" + name + "', '" + surname + "', '" + sex + "', '" + date_of_birth + "', '" + \
              phone_num + "', '" + OMS_policy_number + "', " + address + ", '" + blood_type + "', '" + \
              rhesus_factor + "', '" + health_group + "', '" + disability + "'"
    return result

def create_patient():
    global start_patient
    start_patient += 1
    result = str(start_patient)
    return result

def create_reception():

    patient = str(random.randint(1, 1000))

    rand_year = str(random.randint(1950, 2019))
    rand_month = str(random.randint(1, 12))
    rand_day = str(random.randint(1, 28))
    rand_hour = str(random.randint(8, 20))
    rand_minute = str(random.randint(0, 59))
    date = ""
    date += rand_year + '-' + rand_month + '-' + rand_day + ' ' + rand_hour + ':' + rand_minute

    doctor = str(random.randint(1, 1000))

    result = patient + ", '" + date + "', " + doctor
    return result


def split_string(string):
    res = string.split(',')
    res_str = ''
    for i in range(len(res)):
        res[i] = res[i].strip()
        res_str += "'"
        res_str += res[i]
        res_str += "', "
    res_str = res_str[:-2]
    return res_str


def create_insert_query(q, string):
    query = q
    query += " values (" + string + ");\n"
    return query


def write_query_to_file(file, string):
    file.write(string)


DOCTORS_QUERY = "insert into doctors (name, surname, sex, date_of_birth, speciality, phone_num, category, salary)"
ADDRESSES_QUERY = "insert into addresses (country, city, street, house_number, building, flat)"
CARD_QUERY = "insert into outpatientcards (name, surname, sex, date_of_birth, phone_num, OMS_policy_number, " + \
             "address, blood_type, rhesus_factor, health_group, disability)"
PATIENT_QUERY = "insert into patients (outpat_card)"
RECEPTION_QUERY = "insert into receptions (patient, date_time, doctor)"


f = open('/home/syzygy/Desktop/Labs/DB/lab1/create_receptions.sql', 'w', encoding='utf-8')
for i in range(1000):
    reception = create_reception()
    query = create_insert_query(RECEPTION_QUERY, reception)
    write_query_to_file(f, query)
f.close()

# s = input(">> ")
# s = split_string(s)
# print(s)

# s = generate_random_address()
# print(s)

